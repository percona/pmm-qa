---
# This playbook does following:
#   install postgres with pgstatement enabled for QAN and PMM Integration testing

- hosts: all
  become: true
  become_method: sudo
  vars:
    pgsql_version: "{{ PGSQL_VERSION | default('14', true) }}"
    pgsql_pgss_container: "{{ lookup('vars', 'extra_pgsql_pgss_container', default=lookup('env','PGSQL_PGSS_CONTAINER') | default('pgsql_pgss', true) ) }}"
    pgsql_pgss_container_name: "{{ pgsql_pgss_container }}_{{ pgsql_version }}"
    pmm_server_ip: "{{ lookup('vars', 'extra_pmm_server_ip', default=lookup('env','PMM_SERVER_IP') | default('pmm-integration-server', true) ) }}"
    client_version: "{{ CLIENT_VERSION | default('dev-latest', true) }}"
    admin_password: "{{ lookup('vars', 'extra_admin_password', default=lookup('env','ADMIN_PASSWORD') | default('admin', true) ) }}"
    pmm_qa_branch: "{{ lookup('vars', 'extra_pmm_qa_branch', default=lookup('env','PMM_QA_GIT_BRANCH') | default('main', true) ) }}"
    ansible_python_interpreter: "{{ ansible_playbook_python }}"

  tasks:
    - name: cleanup container for client and DB setup
      shell: >
        docker ps -a --filter "name={{ pgsql_pgss_container_name }}" | grep -q . && docker stop {{ pgsql_pgss_container_name }} && docker rm -fv {{ pgsql_pgss_container_name }}
      ignore_errors: true
      tags:
        - cleanup

    - name: Prepare Container for PostgreSQL
      shell: >
        sudo docker run -d --name={{ pgsql_pgss_container_name }}
        -p 5438:5432
        --network="pmm-integration-network"
        phusion/baseimage:focal-1.1.0

    - name: Copy all required Artifacts to the docker pgsql_pgss_container_name
      shell: "{{ item }}"
      with_items:
        - docker exec {{ pgsql_pgss_container_name }} mkdir -p artifacts
        - docker cp ./pg_stat_statements_setup.sh {{ pgsql_pgss_container_name }}:/
        - docker cp ../pgsql_pgsm_setup/pgsm_run_queries.sh {{ pgsql_pgss_container_name }}:/

    - name: Execute Setup script inside the pgsql pgsql_pgss_container_name
      shell: "{{ item }}"
      with_items:
        - docker exec {{ pgsql_pgss_container_name }} bash -xe ./pg_stat_statements_setup.sh --pgsql_version {{ pgsql_version }} > setup_pgsql_pgss_{{ pgsql_version }}.log

    - name: Install pmm2-client on the pgsql_pgss_container_name
      shell: "{{ item }}"
      with_items:
        - docker exec {{ pgsql_pgss_container_name }} wget https://raw.githubusercontent.com/percona/pmm-qa/{{ pmm_qa_branch }}/pmm-tests/pmm2-client-setup.sh
        - docker exec {{ pgsql_pgss_container_name }} bash -x ./pmm2-client-setup.sh --pmm_server_ip {{ pmm_server_ip }} --client_version {{ client_version }} --admin_password {{ admin_password }} --use_metrics_mode no

    - name: Remove pgsql service if already added previously
      shell: "{{ item }}"
      with_items:
        - docker exec {{ pgsql_pgss_container_name }} bash -c 'source ~/.bash_profile || true; pmm-admin remove postgresql {{ pgsql_pgss_container_name }}_service'
      ignore_errors: true

    - name: Add pgsql_pgss for monitoring
      shell: "{{ item }}"
      with_items:
        - docker exec {{ pgsql_pgss_container_name }} bash -c 'source ~/.bash_profile || true; pmm-admin list'
        - docker exec {{ pgsql_pgss_container_name }} bash -c 'source ~/.bash_profile || true; pmm-admin add postgresql --username=pmm --password=pmm --query-source=pgstatements {{ pgsql_pgss_container_name }}_service'

    - name: cleanup pgadmin container if already running
      shell: >
        docker ps -a --filter "name=pgadmin" | grep -q . && docker stop pgadmin && docker rm -fv pgadmin
      ignore_errors: true
      tags:
        - cleanup

    - name: Start PGAdmin docker container
      shell: "{{ item }}"
      with_items:
        - docker run --name=pgadmin -d -p 9093:80 --network="pmm-integration-network" -e PGADMIN_DEFAULT_EMAIL=admin@admin.com -e PGADMIN_DEFAULT_PASSWORD=root dpage/pgadmin4

    - name: Run queries for generating data, using the same script for pgsm
      shell: "{{ item }}"
      with_items:
        - docker exec {{ pgsql_pgss_container_name }} bash ../pgsql_pgsm_setup/pgsm_run_queries.sh &
