---
name: runner-upgrade-tests

on:
  workflow_call:
    inputs:
      pmm_ui_tests_branch:
        description: 'pmm-ui-tests repository branch'
        default: 'main'
        type: string
        required: true
      pre_upgrade_tests:
        description: 'Tag(s) to run tests before upgrade'
        type: string
        required: true
      post_upgrade_tests:
        description: 'Tag(s) to run tests after upgrade'
        type: string
        required: true
      pmm_server_start_version:
        description: 'PMM Server version to upgrade (latest|dev-latest|x.xx.x|x.xx.x-rc)'
        default: 'latest'
        type: string
        required: true
      pmm_client_start_version:
        description: 'PMM Client version to upgrade from (dev-latest|pmm2-latest|pmm2-rc|x.xx.x)'
        default: 'pmm2-latest'
        type: string
        required: true
      upgrade_type:
        description: 'Upgrade way:'
        required: true
        default: 'UI way'
        type: string
      pmm_qa_branch:
        description: 'pmm-qa repository branch(for setup)'
        default: 'main'
        type: string
        required: true
      services_list:
        description: 'Services for pmm-server'
        default: '--addclient=ps,1'
        type: string
        required: true
      repository:
        description: 'Upgrade to:'
        required: true
        default: 'dev-latest'
        type: string
      version_string_from:
        description: 'start version string'
        type: string
      version_string_to:
        description: 'finish version string'
        type: string

  workflow_dispatch:
    inputs:
      pmm_ui_tests_branch:
        description: 'pmm-ui-tests repository branch'
        default: 'main'
        required: true
      pre_upgrade_tests:
        description: 'Tag(s) to run tests before upgrade'
        required: true
      post_upgrade_tests:
        description: 'Tag(s) to run tests after upgrade'
        required: true
      pmm_server_start_version:
        description: 'PMM Server version to upgrade from (latest|dev-latest|x.xx.x|x.xx.x-rc)'
        default: 'latest'
        required: true
      pmm_client_start_version:
        description: 'PMM Client version to upgrade from (dev-latest|pmm2-latest|pmm2-rc|x.xx.x)'
        default: 'pmm2-latest'
        required: true
      upgrade_type:
        description: 'Upgrade way:'
        required: true
        default: 'UI way'
        type: choice
        options:
          - 'UI way'
          - 'Docker way'
      pmm_qa_branch:
        description: 'pmm-qa repository branch(for setup)'
        default: 'main'
        required: true
      services_list:
        description: 'Services for pmm-server'
        default: '--addclient=ps,1'
        required: true
      repository:
        description: 'Upgrade to:'
        required: true
        default: 'dev-latest'
        type: choice
        options:
          - 'release'
          - 'release candidate'
          - 'dev-latest'

jobs:
  tests:
    name: '${{ inputs.upgrade_type }} "${{ inputs.version_string_from || inputs.pmm_server_start_version }}" -> "${{ inputs.version_string_to || inputs.repository }}"'
    runs-on: ubuntu-latest
    timeout-minutes: 60
    env:
      # TODO: each variable/group must have comment where it is used
      SHA: ${{ inputs.sha || 'null' }}
      PMM_BASE_URL: https://127.0.0.1

      ### IP and Pass to use in pipeline
      PMM_SERVER_IP: 127.0.0.1
      ADMIN_PASSWORD: admin1

      OKTA_TOKEN: ${{ secrets.OKTA_TOKEN }}
      OAUTH_ISSUER_URL: 'https://id-dev.percona.com/oauth2/aus15pi5rjdtfrcH51d7'
      OAUTH_CLIENT_ID: ${{ secrets.OKTA_OAUTH_CLIENT_ID }}
      OAUTH_CLIENT_SECRET: ${{ secrets.OKTA_OAUTH_CLIENT_SECRET }}
      OAUTH_PMM_CLIENT_ID: ${{ secrets.OKTA_OAUTH_PMM_CLIENT_ID }}
      OAUTH_PMM_CLIENT_SECRET: ${{ secrets.OKTA_OAUTH_PMM_CLIENT_SECRET }}
      OAUTH_DEV_HOST: ${{ secrets.OAUTH_DEV_HOST }}
      OAUTH_SCOPES: percona

      ### inject "upgrade from" version for test conditional
      PMM_SERVER_START_VERSION: ${{ inputs.version_string_from || inputs.pmm_server_start_version }}

      # Variables for E2E tests
      MAILOSAUR_API_KEY: ${{ secrets.MAILOSAUR_API_KEY }}
      MAILOSAUR_UI_TESTS_SERVER_ID: ${{ secrets.MAILOSAUR_UI_TESTS_SERVER_ID }}
      MAILOSAUR_API_TESTS_SERVER_ID: ${{ secrets.MAILOSAUR_API_TESTS_SERVER_ID }}

      SERVICENOW_LOGIN: percona_platform
      SERVICENOW_PASSWORD: ${{ secrets.SERVICENOW_PASSWORD }}
      SERVICENOW_DEV_URL: 'https://perconadev.service-now.com/api/x_pellc_percona_pl/platform/settest'

    steps:
      - name: 'Set job tag'
        run: |
          job_tag=$(echo "${{ inputs.pre_upgrade_tests }}" | sed -e "s/-pre-upgrade//" -e "s/@//")
          echo $job_tag
          echo "JOB_TAG=$job_tag" >> $GITHUB_ENV

      - name: 'PMM Server(${{ inputs.pmm_server_start_version }}) and UI tests with tags "${{ inputs.pre_upgrade_tests }}, ${{ inputs.post_upgrade_tests }}" from pmm-ui-tests branch: ${{ inputs.pmm_ui_tests_branch }}'
        if: ${{ env.SHA != 'null' }}
        uses: percona/gh-action-github-status-action@v1
        with:
          context: 'PMM Upgrade Tests ${{ env.REPORT_NAME }}'
          description: "Test execution ${{ job.status }}"
          state: 'pending'
          repository: ${{ inputs.repository }}
          target_url: 'https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}'
          sha: ${{ env.SHA }}

      - name: 'Convert choice into repo'
        uses: actions/github-script@v6
        id: target_repo
        with:
          script: |
            switch ('${{ inputs.repository }}') {
              case 'release':
                return 'release';
              case 'release candidate':
                return 'testing'
              case 'dev-latest':
                return 'experimental'
            }
          result-encoding: string

      - name: 'Select <PMM Server> from image'
        uses: actions/github-script@v6
        id: pmm_server_start_image
        with:
          script: |
            const tag = '${{ inputs.pmm_server_start_version }}';
            let repo = 'percona';
            if (tag.includes('dev-') || tag.includes('-rc')) {
              repo = 'perconalab';
            }
            console.log(JSON.stringify(context.payload));
            return `${repo}/pmm-server:${tag}`
          result-encoding: string

      - name: 'Select <PMM Server> to image'
        id: pmm_server_to_image
        shell: bash
        run: |
          if [[ "${{ inputs.repository }}" = "dev-latest" ]]; then
            echo "IMAGE=perconalab/pmm-server:dev-latest" >> "$GITHUB_OUTPUT"
          fi
          if [[ "${{ inputs.repository }}" = "release candidate" ]]; then
            if [[ -z "${{ inputs.version_string_to }}" ]]; then
              rc_latest=$(wget -q "https://registry.hub.docker.com/v2/repositories/perconalab/pmm-client/tags?page_size=25&name=rc" -O - | jq -r .results[].name  | grep 2.*.*-rc$ | sort -V | tail -n1)
              echo "IMAGE=perconalab/pmm-server:$rc_latest" >> "$GITHUB_OUTPUT"
            else
              echo "IMAGE=perconalab/pmm-server:${{ inputs.version_string_to }}" >> "$GITHUB_OUTPUT"
            fi
          fi
          if [[ "${{ inputs.repository }}" = "release" ]]; then
            if [[ -z "${{ inputs.version_string_to }}" ]]; then
              r_latest=$(wget -q https://registry.hub.docker.com/v2/repositories/percona/pmm-client/tags -O - | jq -r .results[].name  | grep -v latest | sort -V | tail -n1)
              echo "IMAGE=percona/pmm-server:$r_latest" >> "$GITHUB_OUTPUT"
            else
              echo "IMAGE=percona/pmm-server:${{ inputs.version_string_to }}" >> "$GITHUB_OUTPUT"
            fi
          fi

      - name: 'Checkout UI tests: "${{ inputs.pmm_ui_tests_branch }}"'
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.pmm_ui_tests_branch }}
          repository: percona/pmm-ui-tests
          path: ./pmm-ui-tests

      - name: 'Install playwright'
        working-directory: ./pmm-ui-tests/playwright-tests
        run: |
          npm install
          npx playwright install

      - name: 'Checkout pmm-qa: "${{ inputs.pmm_qa_branch }}"'
        uses: actions/checkout@v3
        with:
          # token: ${{ secrets.ROBOT_TOKEN }}
          repository: percona/pmm-qa
          ref: ${{ inputs.pmm_qa_branch }}
          path: ./pmm-qa

      - name: 'Install Podman'
        if: ${{ inputs.upgrade_type == 'Podman way' }}
        working-directory: ./pmm-ui-tests
        run: |
          . /etc/os-release
          echo "deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_${VERSION_ID}/ /" | sudo tee \
              /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list
          curl -L "https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_${VERSION_ID}/Release.key" | sudo apt-key add -
          sudo apt-get update
          sudo apt-get -y upgrade
          sudo apt-get install -y podman
          sudo sysctl net.ipv4.ip_unprivileged_port_start=80

      - name: 'Setup Podman <PMM Sever>: "${{ steps.pmm_server_start_image.outputs.result }}"'
        if: ${{ inputs.upgrade_type == 'Podman way' }}
        working-directory: ./pmm-ui-tests
        run: |
          ### create service files
          mkdir -p ~/.config/systemd/user/
          cat > ~/.config/systemd/user/pmm-server.service <<EOF
          [Unit]
          Description=pmm-server
          Wants=network-online.target
          After=network-online.target
          After=nss-user-lookup.target nss-lookup.target
          After=time-sync.target
          
          [Service]
          Type=simple
          
          # set environment for this unit
          Environment=PMM_HTTP_PORT=80
          Environment=PMM_PUBLIC_PORT=443
          Environment=PMM_VOLUME_NAME=%N
          Environment=PMM_SERVER_IMAGE=docker.io/${{ steps.pmm_server_start_image.outputs.result }}
          Environment=PMM_ENV_FILE=%h/.config/pmm-server/pmm-server.env
          
          # optional env file that could override previous env settings for this unit
          EnvironmentFile=-%h/.config/pmm-server/env
          
          ExecStart=/usr/bin/podman run --rm --replace=true --name=%N -p \${PMM_PUBLIC_PORT}:443/tcp -p \${PMM_HTTP_PORT}:80/tcp --ulimit=host --volume=\${PMM_VOLUME_NAME}:/srv --env-file=\${PMM_ENV_FILE} --health-cmd=none --health-interval=disable \${PMM_SERVER_IMAGE}
          ExecStop=/usr/bin/podman stop -t 10 %N
          Restart=on-failure
          RestartSec=20
          
          [Install]
          Alias=%N
          WantedBy=default.target
          
          EOF
          mkdir -p ~/.config/pmm-server/
          cat > ~/.config/pmm-server/pmm-server.env <<EOF
          DISABLE_UPDATES=1
          #ENABLE_DBAAS=1
          PMM_DEBUG=1
          PERCONA_TEST_SAAS_HOST=check-dev.percona.com:443
          PERCONA_TEST_CHECKS_PUBLIC_KEY=RWTg+ZmCCjt7O8eWeAmTLAqW+1ozUbpRSKSwNTmO+exlS5KEIPYWuYdX
          PERCONA_TEST_PLATFORM_ADDRESS=https://check-dev.percona.com:443
          PERCONA_TEST_PLATFORM_PUBLIC_KEY=RWTg+ZmCCjt7O8eWeAmTLAqW+1ozUbpRSKSwNTmO+exlS5KEIPYWuYdX
          PERCONA_TEST_VERSION_SERVICE_URL=https://check-dev.percona.com/versions/v1
          PERCONA_TEST_TELEMETRY_INTERVAL=10s
          PERCONA_TEST_TELEMETRY_RETRY_BACKOFF=10s
          ENABLE_RBAC=1
          EOF
          
          ### run service
          systemctl --user enable --now pmm-server
          
          ### wait for service to be ready
          export CONTAINER_NAME="pmm-server"
          export LOGS="pmm-managed entered RUNNING state"
          attempt=0
          while [ $attempt -le 3 ]; do
            attempt=$(( $attempt + 1 ))
            echo "Waiting for ${CONTAINER_NAME} to be up (attempt: $attempt)..."
            result=$(systemctl --user status ${CONTAINER_NAME})
            if grep "${LOGS}" <<< $result ; then
              echo "${CONTAINER_NAME} is ready!"
              break
            fi
            sleep 10
          done;
          timeout 100 bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' http://admin:admin@${{ env.PMM_SERVER_IP }}/ping)" != "200" ]]; do sleep 5; done' || false
          podman exec pmm-server change-admin-password ${{ env.ADMIN_PASSWORD }}

      - name: 'Setup <PMM Sever>: "${{ steps.pmm_server_start_image.outputs.result }}"'
        if: ${{ inputs.upgrade_type != 'Podman way' }}
        working-directory: pmm-qa/pmm-integration
        run: |
          npm install
          sudo npx ts-node ./integration-setup.ts --ci --setup-docker-pmm-server --rbac --pmm-server-docker-tag=${{ steps.pmm_server_start_image.outputs.result }} --pmm-client-version=${{ inputs.pmm_client_start_version }}          
          timeout 100 bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' localhost/ping)" != "200" ]]; do sleep 5; done' || false
          docker exec pmm-integration-server change-admin-password ${{ env.ADMIN_PASSWORD }}

      - name: 'Setup <PMM Client: ${{ inputs.pmm_client_start_version }}> and Services'
        run: |
          sudo bash ./pmm-qa/pmm-tests/pmm2-client-setup.sh --pmm_server_ip ${{ env.PMM_SERVER_IP }} --client_version ${{ inputs.pmm_client_start_version }} --admin_password ${{ env.ADMIN_PASSWORD }} --use_metrics_mode no
          sudo bash ./pmm-qa/pmm-tests/pmm-framework.sh \
            --download \
            ${{ inputs.services_list }} \
            --pmm2 \
            --pmm2-server-ip=${{ env.PMM_SERVER_IP }}
          # TODO: change sleep into fluent wait
          sleep 30
          sudo pmm-admin list
        shell: bash

      - name: 'Tests <BEFORE> upgrade'
        id: ui-tests-flagged
        working-directory: ./pmm-ui-tests/playwright-tests
        run: |
          project="${{ contains(env.PMM_TEST_FLAG, 'portal') && 'Portal' || 'Chromium' }}"
          npx playwright test --project=$project --grep="${{ inputs.pre_upgrade_tests }}" --pass-with-no-tests
        env:
          NODE_TLS_REJECT_UNAUTHORIZED: 0

      - name: 'Enable <${{ steps.target_repo.outputs.result }}> repo in pmm-server container'
        if: ${{ inputs.upgrade_type == 'UI way' }}
        working-directory: ./pmm-ui-tests/playwright-tests
        run: |
          docker exec pmm-integration-server yum update -y percona-release || true
          if [[ "${{ inputs.repository }}" != "release" ]]; then
            docker exec pmm-integration-server sed -i'' -e 's^/release/^/${{ steps.target_repo.outputs.result }}/^' /etc/yum.repos.d/pmm2-server.repo
            docker exec pmm-integration-server percona-release enable-only original ${{ steps.target_repo.outputs.result }}
          fi
          docker exec pmm-integration-server yum clean all
          
          # TODO: could be exchanged to the clicking "refresh" button in tests
          sleep 60
        env:
          NODE_TLS_REJECT_UNAUTHORIZED: 0

      - name: 'Upgrade pmm-server: <UI way>'
        if: ${{ inputs.upgrade_type == 'UI way' }}
        working-directory: ./pmm-ui-tests/playwright-tests
        run: npx playwright test --project=Chromium --grep="@pmm-upgrade"
        env:
          NODE_TLS_REJECT_UNAUTHORIZED: 0

      - name: 'Upgrade pmm-server: <Docker way>'
        if: ${{ inputs.upgrade_type == 'Docker way' }}
        working-directory: ./pmm-ui-tests
        run: |
          # TODO: implement qa-integration docker upgrade
          echo "Upgrading to ${{ steps.pmm_server_to_image.outputs.IMAGE }}"
          docker stop pmm-integration-server
          docker pull ${{ steps.pmm_server_to_image.outputs.IMAGE }}
          docker rename pmm-integration-server pmm-integration-server-old
          docker run --detach --restart always \
            --network="pmm-integration-network" \
            -e PMM_DEBUG=1 \
            --publish 80:80 --publish 443:443 \
            --volumes-from pmm-integration-server-data \
            --name pmm-integration-server \
            ${{ steps.pmm_server_to_image.outputs.IMAGE }}
          timeout 240 bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' http://${{ env.PMM_SERVER_IP }}/v1/readyz)" != "200" ]]; do sleep 2; done' || false

      - name: 'Upgrade pmm-server: <Podman way>'
        if: ${{ inputs.upgrade_type == 'Podman way' }}
        working-directory: ./pmm-ui-tests
        run: |
          echo "Upgrading to ${{ steps.pmm_server_to_image.outputs.IMAGE }}"
          mkdir -p ~/.config/pmm-server/
          echo "PMM_SERVER_IMAGE=docker.io/${{ steps.pmm_server_to_image.outputs.IMAGE }}" > ~/.config/pmm-server/env
          source ~/.config/pmm-server/env
          podman pull docker.io/${{ steps.pmm_server_to_image.outputs.IMAGE }}
          systemctl --user restart pmm-server

          timeout 240 bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' http://${{ env.PMM_SERVER_IP }}/v1/readyz)" != "200" ]]; do sleep 2; done' || false

      - name: 'Tests <before PMM Client> upgrade'
        working-directory: ./pmm-ui-tests/playwright-tests
        run: |
          echo "Hook to inject tests: test are coming soon..."

      - name: 'Upgrade <PMM Client> to the latest on "${{ steps.target_repo.outputs.result }}" repo'
        if: ${{ inputs.pmm_client_upgrade_version == '' }}
        run: |
          sudo percona-release enable-only original ${{ steps.target_repo.outputs.result }}
          sudo apt-get update -y
          sudo apt -y install pmm2-client
          
          # TODO: add client check after update here

      - name: 'Tests <AFTER> upgrading Client and Server'
        working-directory: ./pmm-ui-tests/playwright-tests
        run: |
          project="${{ contains(env.PMM_TEST_FLAG, 'portal') && 'Portal' || 'Chromium' }}"
          npx playwright test --project=$project --grep="${{ inputs.post_upgrade_tests }}" --pass-with-no-tests
        env:
          NODE_TLS_REJECT_UNAUTHORIZED: 0

      - name: 'Create report name'
        if: failure()
        run: |
          # TODO: add job id for matrix call
          report_name=${{ env.JOB_TAG }}-${{ inputs.version_string_from || inputs.pmm_server_start_version }}-report
          echo $report_name
          echo "REPORT_NAME=$report_name" >> $GITHUB_ENV

      - name: Generate and Attach the report
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.REPORT_NAME }}
          path: ./pmm-ui-tests/playwright-tests/playwright-report
