---
name: runner-e2e-tests-playwright

on:
  workflow_dispatch:
    inputs:
      pmm_ui_tests_branch:
        description: 'Target branch for pmm-ui-tests repository'
        type: string
        default: 'main'
        required: true
      pmm_test_flag:
        description: 'Flag to run only specific portion of the tests.'
        type: string
        required: false
      pmm_server_version:
        description: 'Version of the pmm server used for testing'
        type: string
        default: 'dev-latest'
        required: true
      pmm_client_version:
        description: 'Version of the pmm client used for testing'
        type: string
        default: 'dev-latest'
        required: true
      setup_services:
        description: 'Clients for pmm-server'
        type: string
        default: '--addclient=ps,1'
        required: true
      pmm_qa_branch:
        description: 'Branch for the pmm-qa repository.'
        type: string
        default: 'main'
        required: true

  workflow_call:
    inputs:
      pmm_ui_tests_branch:
        type: string
        required: true
      pmm_test_flag:
        type: string
        required: false
      pmm_server_version:
        type: string
        required: true
      pmm_client_version:
        type: string
        required: true
      setup_services:
        type: string
        required: false
      pmm_qa_branch:
        type: string
        required: true

jobs:
  tests:
    name: Tests
    runs-on: ubuntu-latest
    timeout-minutes: 60
    env:
      SHA: ${{ inputs.sha || 'null' }}
      PMM_BASE_URL: https://127.0.0.1

      UI_TESTS_BRANCH: ${{ inputs.pmm_ui_tests_branch }}
      PMM_TEST_FLAG: ${{ inputs.pmm_test_flag }}

      OKTA_TOKEN: ${{ secrets.OKTA_TOKEN }}
      OAUTH_ISSUER_URL: 'https://id-dev.percona.com/oauth2/aus15pi5rjdtfrcH51d7'
      OAUTH_CLIENT_ID: ${{ secrets.OAUTH_CLIENT_ID }}
      OAUTH_CLIENT_SECRET: ${{ secrets.OAUTH_CLIENT_SECRET }}
      OAUTH_PMM_CLIENT_ID: ${{ secrets.OAUTH_PMM_CLIENT_ID }}
      OAUTH_PMM_CLIENT_SECRET: ${{ secrets.OAUTH_PMM_CLIENT_SECRET }}
      OAUTH_DEV_HOST: 'id-dev.percona.com'
      OAUTH_SCOPES: percona

      # Variables for E2E tests
      MAILOSAUR_API_KEY: ${{ secrets.MAILOSAUR_API_KEY }}
      MAILOSAUR_UI_TESTS_SERVER_ID: ${{ secrets.MAILOSAUR_UI_TESTS_SERVER_ID }}
      MAILOSAUR_API_TESTS_SERVER_ID: ${{ secrets.MAILOSAUR_API_TESTS_SERVER_ID }}

      SERVICENOW_LOGIN: percona_platform
      SERVICENOW_PASSWORD: ${{ secrets.SERVICENOW_PASSWORD }}
      SERVICENOW_DEV_URL: 'https://perconadev.service-now.com/api/x_pellc_percona_pl/platform/settest'

      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      ADMIN_PASSWORD: 'admin'
      PMM_SERVER_VERSION: ${{ inputs.pmm_server_version }}
      PMM_QA_BRANCH: ${{ inputs.pmm_qa_branch || 'v3' }}
      PMM_QA_GIT_BRANCH: ${{ inputs.pmm_qa_branch || 'v3' }}
      PMM_UI_BRANCH: ${{ inputs.pmm_ui_tests_branch || 'v3' }}
      DOCKER_VERSION: ${{ inputs.pmm_server_version || 'perconalab/pmm-server:3-dev-latest' }}
      CLIENT_DOCKER_VERSION: ${{ inputs.pmm_client_image || 'perconalab/pmm-client:3-dev-latest' }}
      PMM_CLIENT_VERSION: ${{ inputs.pmm_client_version || '3-dev-latest' }}
      WIZARD_ARGS: ${{ inputs.setup_services || '' }}
      TAGS_FOR_TESTS: ${{ inputs.tags_for_tests || '@settings-fb' }}

    steps:
      - name: PMM server version ${{ inputs.pmm_server_version }} and UI tests for flag "${{ inputs.pmm_test_flag }}" and pmm-ui-tests branch ${{ inputs.pmm_ui_tests_branch }}
        if: ${{ env.SHA != 'null' }}
        uses: percona/gh-action-github-status-action@v1
        continue-on-error: true
        with:
          authToken: ${{ secrets.GITHUB_TOKEN }}
          context: "${{ env.PMM_TEST_FLAG }} UI tests"
          description: "Test execution ${{ job.status }}"
          state: "pending"
          repository: ${{ github.repository }}
          target_url: "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          sha: ${{ env.SHA }}

      - name: Checkout PMM UI tests
        uses: actions/checkout@v4
        with:
          ref: ${{ env.PMM_UI_BRANCH }}
          repository: percona/pmm-ui-tests
          path: ./pmm-ui-tests

      - name: Checkout qa-integration repo
        uses: actions/checkout@v4
        with:
          ref: ${{ env.PMM_QA_BRANCH }}
          repository: Percona-Lab/qa-integration
          path: ./qa-integration

      - name: 'Install playwright'
        working-directory: ./pmm-ui-tests/playwright-tests
        run: |
          npm ci
          npx playwright install

      - name: Setup tools
        run: |
          sudo apt-get install -y apt-transport-https ca-certificates dirmngr ansible libaio1 libaio-dev libnuma-dev libncurses5 socat sysbench
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 8919F6BD2B48D754
          echo "deb https://packages.clickhouse.com/deb stable main" | sudo tee \
              /etc/apt/sources.list.d/clickhouse.list
          sudo apt-get update
          sudo apt-get install -y clickhouse-client
          sudo apt-get install -y ansible
          sudo curl -s https://raw.githubusercontent.com/datacharmer/dbdeployer/master/scripts/dbdeployer-install.sh | bash
          ls -la

      - name: Setup PMM2-Server
        working-directory: pmm-ui-tests
        run: |
          PWD=$(pwd) PMM_SERVER_IMAGE=${{ env.DOCKER_VERSION }} docker-compose up -d
          sleep 60
          docker exec pmm-server change-admin-password ${{ env.ADMIN_PASSWORD }}
          bash -x testdata/db_setup.sh

      - name: Export path to qa-integration repo
        working-directory: qa-integration
        run: echo "PATH_TO_PMM_QA=$(pwd)" >> $GITHUB_ENV

      - name: Setup PMM-Client
        working-directory: qa-integration/pmm_qa
        run: sudo bash -x pmm3-client-setup.sh --pmm_server_ip 192.168.0.1 --client_version ${{ env.PMM_CLIENT_VERSION }} --admin_password ${{ env.ADMIN_PASSWORD }} --use_metrics_mode no

      - name: Run Setup for E2E Tests
        working-directory: qa-integration/pmm_qa
        run: |
          python3 -m venv virtenv
          . virtenv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
          python pmm-framework.py --pmm-server-password=${{ env.ADMIN_PASSWORD }} ${{ env.WIZARD_ARGS }}

      - name: Execute UI tests
        if: ${{ inputs.pmm_test_flag == 'null' }}
        id: ui-tests-all
        working-directory: pmm-ui-tests/playwright-tests
        run: |
          npx playwright test --project="chromium" --quiet

      - name: 'Run UI tests: ${{ env.PMM_TEST_FLAG }}'
        if: ${{ inputs.pmm_test_flag != 'null' }}
        id: ui-tests-flagged
        working-directory: pmm-ui-tests/playwright-tests
        run: |
          project="${{ contains(env.PMM_TEST_FLAG, 'portal') && 'Portal' || 'Chromium' }}"
          npx playwright test --project=$project --grep ${{ env.PMM_TEST_FLAG }} --pass-with-no-tests

      - name: 'Create report name'
        if: failure()
        run: |
          # TODO: add job id for matrix call
          job_tag=$(echo "${{ inputs.pmm_test_flag }}" | sed -e "s/-pre-upgrade//" -e "s/@//")
          report_name="$job_tag"-report
          echo $report_name
          echo "REPORT_NAME=$report_name" >> $GITHUB_ENV

      - name: Generate and Attach the report
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.REPORT_NAME }}
          path: ./pmm-ui-tests/playwright-tests/playwright-report

      - name: Create status check
        uses: percona/gh-action-github-status-action@v1
        if: ${{ env.SHA != 'null' && always() }}
        continue-on-error: true
        with:
          authToken: ${{ secrets.GITHUB_TOKEN }}
          context: "${{ env.PMM_TEST_FLAG }} UI tests"
          description: "Test execution ${{ job.status }}"
          state: ${{ job.status }}
          repository: ${{ github.repository }}
          target_url: "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          sha: ${{ env.SHA }}
