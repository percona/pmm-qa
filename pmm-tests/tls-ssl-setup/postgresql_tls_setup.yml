---
# This playbook does following:
#   enables Percona testing repository
#   Install Percona Server at Version 8.0.25 
#   Install all required tools for backups in compatible version

- hosts: all
  become: true
  become_method: sudo
  vars:
    pgsql_version: "{{ lookup('vars', 'extra_pgsql_version', default=lookup('env','PGSQL_VERSION') | default('13', true) ) }}"
    pgsql_ssl_container: "{{ lookup('vars', 'extra_pgsql_ssl_container', default=lookup('env','PGSQL_SSL_CONTAINER') | default('pgsql_ssl', true) ) }}"
    pmm_server_ip: "{{ lookup('vars', 'extra_pmm_server_ip', default=lookup('env','PMM_SERVER_IP') | default('127.0.0.1', true) ) }}"
    client_version: "{{ lookup('vars', 'extra_client_version', default=lookup('env','CLIENT_VERSION') | default('dev-latest', true) ) }}"
    admin_password: "{{ lookup('vars', 'extra_admin_password', default=lookup('env','ADMIN_PASSWORD') | default('admin', true) ) }}"
    pmm_qa_branch: "{{ lookup('vars', 'extra_pmm_qa_branch', default=lookup('env','PMM_QA_GIT_BRANCH') | default('main', true) ) }}"

  tasks:
  - name: cleanup container for client and DB setup
    shell: >
      docker ps -a --filter "name={{ pgsql_ssl_container }}" | grep -q . && docker stop {{ pgsql_ssl_container }} && docker rm -fv {{ pgsql_ssl_container }}
    ignore_errors: true
    tags:
      - cleanup
  - name: delete network if exist
    shell: docker network rm "{{ pgsql_ssl_container }}_network"
    ignore_errors: true
    tags:
      - cleanup

  - name: Create a network
    shell: docker network create "{{ pgsql_ssl_container }}_network"

  - name: Create pmm-qa network if not exist
    shell: docker network create pmm-qa
    ignore_errors: true

  - name: Prepare Container for PostgreSQL
    shell: >
      docker run -d --name={{ pgsql_ssl_container }}
      --network "{{ pgsql_ssl_container }}_network"
      phusion/baseimage:focal-1.1.0
  
  - name: Copy all required Artifacts to the docker pgsql_ssl_container
    shell: "{{ item }}"
    with_items:
      - docker exec {{ pgsql_ssl_container }} mkdir -p artifacts
      - docker cp ./create_certs.sh {{ pgsql_ssl_container }}:/artifacts/
      - docker cp ./postgres/setup_pgsql.sh {{ pgsql_ssl_container }}:/
      - docker cp ./postgres/init.sql {{ pgsql_ssl_container }}:/

  - name: Execute Setup script inside the pgsql pgsql_ssl_container
    shell: "{{ item }}"
    with_items:
      - docker exec {{ pgsql_ssl_container }} bash -xe ./setup_pgsql.sh --pgsql_version {{ pgsql_version }} > postgres/setup_pgsql_{{ pgsql_version }}.log

  - name: Install pmm2-client on the pgsql_ssl_container
    shell: "{{ item }}"
    with_items:
      - docker exec {{ pgsql_ssl_container }} wget https://raw.githubusercontent.com/percona/pmm-qa/{{ pmm_qa_branch }}/pmm-tests/pmm2-client-setup.sh
      - docker network connect pmm-qa {{ pgsql_ssl_container }}
      - docker exec {{ pgsql_ssl_container }} bash -x ./pmm2-client-setup.sh --pmm_server_ip {{ pmm_server_ip }} --client_version {{ client_version }} --admin_password {{ admin_password }} --use_metrics_mode no

  - name: Remove pgsql service if already added previously
    shell: "{{ item }}"
    with_items:
      - docker exec {{ pgsql_ssl_container }} bash -c 'source ~/.bash_profile || true; pmm-admin remove postgresql {{ pgsql_ssl_container }}_ssl_service'
    ignore_errors: true 

  - name: Add pgsql_ssl for monitoring
    shell: "{{ item }}"
    with_items:
      - docker exec {{ pgsql_ssl_container }} bash -c 'source ~/.bash_profile || true; pmm-admin list'
      - docker exec {{ pgsql_ssl_container }} bash -c 'source ~/.bash_profile || true; pmm-admin add postgresql --username=pmm --password=pmm --query-source="pgstatements" --tls --tls-ca-file=./certificates/ca.crt --tls-cert-file=./certificates/client.crt --tls-key-file=./certificates/client.pem {{ pgsql_ssl_container }}_ssl_service'
     # - docker exec {{ pgsql_ssl_container }} bash -c 'source ~/.bash_profile; pmm-admin add postgresql --socket=/var/run/postgresql postgresql_socket'

  - name: Get client cert Files on host
    shell: "{{ item }}"
    with_items:
      - mkdir -p postgres/{{ pgsql_version }}
      - docker exec {{ pgsql_ssl_container }} cat ./certificates/ca.crt > postgres/{{ pgsql_version }}/ca.crt
      - docker exec {{ pgsql_ssl_container }} cat ./certificates/client.crt > postgres/{{ pgsql_version }}/client.crt
      - docker exec {{ pgsql_ssl_container }} cat ./certificates/client.pem > postgres/{{ pgsql_version }}/client.pem
